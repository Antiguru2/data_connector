"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–º–ø–æ–≤ Data Connector

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã create_dump
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–º–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DataConnector.
"""

from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.conf import settings
import os


class Command(BaseCommand):
    help = '–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–º–ø–æ–≤ Data Connector'

    def add_arguments(self, parser):
        parser.add_argument(
            '--demo',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π'
        )

    def handle(self, *args, **options):
        if options['demo']:
            self.run_demo()
        else:
            self.show_examples()

    def run_demo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –¥–∞–º–ø–æ–≤"""
        self.stdout.write(
            self.style.SUCCESS('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–º–ø–æ–≤ Data Connector\n')
        )

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–µ–º–æ
        demo_dir = os.path.join(settings.BASE_DIR, 'fixtures', 'demo')
        os.makedirs(demo_dir, exist_ok=True)

        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞–º–ø–∞ –≤ REST —Ñ–æ—Ä–º–∞—Ç–µ
        self.stdout.write('üì¶ 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –¥–∞–º–ø–∞ –≤ REST —Ñ–æ—Ä–º–∞—Ç–µ...')
        try:
            call_command(
                'create_dump', 'create',
                app='data_connector',
                data_type='rest',
                output_file_path=os.path.join(demo_dir, 'basic_rest_dump.json')
            )
            self.stdout.write(self.style.SUCCESS('‚úÖ –ë–∞–∑–æ–≤—ã–π REST –¥–∞–º–ø —Å–æ–∑–¥–∞–Ω'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –≤ FORM —Ñ–æ—Ä–º–∞—Ç–µ
        self.stdout.write('üìã 2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –≤ FORM —Ñ–æ—Ä–º–∞—Ç–µ...')
        try:
            call_command(
                'create_dump', 'create',
                app='data_connector',
                data_type='form',
                output_file_path=os.path.join(demo_dir, 'form_dump.json')
            )
            self.stdout.write(self.style.SUCCESS('‚úÖ FORM –¥–∞–º–ø —Å–æ–∑–¥–∞–Ω'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        self.stdout.write('üîß 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ DataConnector...')
        try:
            call_command(
                'create_dump', 'create',
                app='data_connector',
                data_type='rest',
                include_data_connector=True,
                include_serializer_fields=True,
                output_file_path=os.path.join(demo_dir, 'full_dump.json')
            )
            self.stdout.write(self.style.SUCCESS('‚úÖ –ü–æ–ª–Ω—ã–π –¥–∞–º–ø —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
        self.stdout.write('üß™ 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π...')
        try:
            call_command(
                'create_dump', 'create',
                app='data_connector',
                models=['MainTestModel', 'OneToOneModel', 'ForInKeyModel'],
                data_type='key-form',
                output_file_path=os.path.join(demo_dir, 'test_models_dump.json')
            )
            self.stdout.write(self.style.SUCCESS('‚úÖ –î–∞–º–ø —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        # 5. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        self.stdout.write('üö´ 5. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ª–æ–≥–æ–≤...')
        try:
            call_command(
                'create_dump', 'create',
                app='data_connector',
                exclude=['TransmitterLog'],
                data_type='rest',
                output_file_path=os.path.join(demo_dir, 'clean_dump.json')
            )
            self.stdout.write(self.style.SUCCESS('‚úÖ –ß–∏—Å—Ç—ã–π –¥–∞–º–ø —Å–æ–∑–¥–∞–Ω'))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}'))

        self.stdout.write('\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        self.stdout.write(f'üìÅ –§–∞–π–ª—ã –¥–∞–º–ø–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {demo_dir}')
        self.show_demo_files(demo_dir)

    def show_demo_files(self, demo_dir):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–º–ø–æ–≤"""
        self.stdout.write('\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–º–ø–æ–≤:')
        if os.path.exists(demo_dir):
            for filename in os.listdir(demo_dir):
                if filename.endswith('.json'):
                    file_path = os.path.join(demo_dir, filename)
                    file_size = os.path.getsize(file_path)
                    self.stdout.write(f'  üìÑ {filename} ({file_size} –±–∞–π—Ç)')

    def show_examples(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        self.stdout.write(
            self.style.SUCCESS('üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∞–º–ø–æ–≤ Data Connector\n')
        )

        examples = [
            {
                'title': '–ë–∞–∑–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞',
                'description': '–°–æ–∑–¥–∞—Ç—å –¥–∞–º–ø –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ REST —Ñ–æ—Ä–º–∞—Ç–µ',
                'command': 'python manage.py create_dump create --app data_connector'
            },
            {
                'title': '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –≤ FORM —Ñ–æ—Ä–º–∞—Ç–µ',
                'description': '–°–æ–∑–¥–∞—Ç—å –¥–∞–º–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ FORM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–∞–º–∏',
                'command': 'python manage.py create_dump create --app data_connector --data_type form'
            },
            {
                'title': '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏',
                'description': '–í–∫–ª—é—á–∏—Ç—å –≤ –¥–∞–º–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DataConnector –∏ SerializerField',
                'command': 'python manage.py create_dump create --app data_connector --include_data_connector --include_serializer_fields'
            },
            {
                'title': '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π',
                'description': '–°–æ–∑–¥–∞—Ç—å –¥–∞–º–ø —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
                'command': 'python manage.py create_dump create --app data_connector --models MainTestModel OneToOneModel'
            },
            {
                'title': '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π',
                'description': '–°–æ–∑–¥–∞—Ç—å –¥–∞–º–ø —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
                'command': 'python manage.py create_dump create --app data_connector --exclude TransmitterLog'
            },
            {
                'title': '–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É',
                'description': '–£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–º–ø–∞',
                'command': 'python manage.py create_dump create --app data_connector --output_file_path /path/to/my_dump.json'
            },
            {
                'title': '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–º–ø–∞',
                'description': '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–∞–º–ø–∞',
                'command': 'python manage.py create_dump load --input_file_path /path/to/dump.json'
            },
            {
                'title': '–ó–∞–≥—Ä—É–∑–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π',
                'description': '–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–º–ø–∞',
                'command': 'python manage.py create_dump load --input_file_path /path/to/dump.json --clear_existing'
            },
            {
                'title': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
                'description': '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã',
                'command': 'python manage.py example_dump_usage --demo'
            }
        ]

        for i, example in enumerate(examples, 1):
            self.stdout.write(f'\n{i}. {example["title"]}')
            self.stdout.write(f'   {example["description"]}')
            self.stdout.write(f'   üíª {example["command"]}')

        self.stdout.write('\n' + '='*60)
        self.stdout.write('üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:')
        self.stdout.write('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --data_type –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö')
        self.stdout.write('   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ --include_data_connector –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤')
        self.stdout.write('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --clear_existing –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —á–∏—Å—Ç—É—é —Å—Ä–µ–¥—É')
        self.stdout.write('   ‚Ä¢ –§–∏–ª—å—Ç—Ä—É–π—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–º–ø–æ–≤')
        self.stdout.write('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–º–ø–æ–≤')

        self.stdout.write('\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:')
        self.stdout.write('   üìÑ DUMP_SYSTEM_SUMMARY.md - –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã')
        self.stdout.write('   üìÑ README.md - –û–±—â–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è') 